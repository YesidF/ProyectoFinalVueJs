{"remainingRequest":"C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\src\\components\\FormRegUserComponent.vue?vue&type=template&id=73f15d5c&scoped=true&","dependencies":[{"path":"C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\src\\components\\FormRegUserComponent.vue","mtime":1634793619895},{"path":"C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yesid Fernández\\Documents\\ProyectoFinal\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}